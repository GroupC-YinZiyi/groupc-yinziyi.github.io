[
  {
    "objectID": "practice/practice3.out.html",
    "href": "practice/practice3.out.html",
    "title": "",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport textwrap\n\n\npd.read_csv(\n    \"https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv\", nrows=10\n)"
  },
  {
    "objectID": "practice/practice1.out.html",
    "href": "practice/practice1.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\nLetsPlot.setup_html(no_js=True)\n\n### You don't need to use these settings yourself,\n### they are just here to make the charts look nicer!\n# Set the plot style for prettier charts:\nplt.style.use(\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)"
  },
  {
    "objectID": "docs/labs/Scores.out.html",
    "href": "docs/labs/Scores.out.html",
    "title": "Scores",
    "section": "",
    "text": "Introduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406"
  },
  {
    "objectID": "docs/labs/Occupation.out.html",
    "href": "docs/labs/Occupation.out.html",
    "title": "Ex3 - Getting and Knowing your Data",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64"
  },
  {
    "objectID": "docs/labs/Euro12.out.html",
    "href": "docs/labs/Euro12.out.html",
    "title": "Ex2 - Filtering and Sorting Data",
    "section": "",
    "text": "This time we are going to pull data directly from the internet.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%"
  },
  {
    "objectID": "docs/labs/Open food facts.out.html",
    "href": "docs/labs/Open food facts.out.html",
    "title": "Exercise 1",
    "section": "",
    "text": "Step 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n5 rows × 163 columns"
  },
  {
    "objectID": "docs/labs/Visualizinf Chipotle's Data.out.html",
    "href": "docs/labs/Visualizinf Chipotle's Data.out.html",
    "title": "Visualizing Chipotle’s Data",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)"
  },
  {
    "objectID": "practice/practice2.out.html",
    "href": "practice/practice2.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\n\nLetsPlot.setup_html(no_js=True)\n\n\nplt.style.use(\n\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)\n\n\nread_file = pd.read_excel (\"/Users/yinziyi/Documents/白大教育管理/imformation/homework/practice2/doing-economics-datafile-working-in-excel-project-2.xlsx\")\n\n\ndata_np = pd.read_excel(\n    \"/Users/yinziyi/Documents/白大教育管理/imformation/homework/practice2/doing-economics-datafile-working-in-excel-project-2.xlsx\",\n    usecols=\"A:Q\",\n    header=1,\n    index_col=\"Period\",\n)\ndata_n = data_np.iloc[:10, :].copy()\ndata_p = data_np.iloc[14:24, :].copy()\n\n\nmean_n_c = data_n.mean(axis=1)\nmean_p_c = data_p.agg(np.mean, axis=1)\n\n\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\")\nmean_p_c.plot(ax=ax, label=\"With punishment\")\nax.set_title(\"Average contributions to the public goods game\")\nax.set_ylabel(\"Average contribution\")\nax.legend();\n\n\n\n\n\n\n\n\n\ncompare_grps = pd.DataFrame(\n    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],\n    index=[\"Without punishment\", \"With punishment\"],\n)\n# Rename columns to have 'round' in them\ncompare_grps.columns = [\"Round \" + str(i) for i in compare_grps.columns]\n# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)\ncompare_grps = compare_grps.T\n# Make a bar chart\ncompare_grps.plot.bar(rot=0);\n\n\n\n\n\n\n\n\n\nn_c = data_n.agg([\"std\", \"var\", \"mean\"], 1)\nn_c"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yin Ziyi’s website and data analysis portfolio",
    "section": "",
    "text": "Hello, and thanks for visiting!\nWelcome to my website and data analysis portfolio.\nHere, I’ll feature my projects for the Fall 2024 Informational technologies in Business class.\nPlease use the Menu Bar above to look around."
  },
  {
    "objectID": "practice.html",
    "href": "practice.html",
    "title": "practice1",
    "section": "",
    "text": "practice1\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\nLetsPlot.setup_html(no_js=True)\n\n### You don't need to use these settings yourself,\n### they are just here to make the charts look nicer!\n# Set the plot style for prettier charts:\nplt.style.use(\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)\n\nSource: You don't need to use these settings yourself,\n\n\npractice2\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\n\nLetsPlot.setup_html(no_js=True)\n\n\nplt.style.use(\n\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)\n\n\nread_file = pd.read_excel (\"/Users/yinziyi/Documents/白大教育管理/imformation/homework/practice2/doing-economics-datafile-working-in-excel-project-2.xlsx\")\n\n\ndata_np = pd.read_excel(\n    \"/Users/yinziyi/Documents/白大教育管理/imformation/homework/practice2/doing-economics-datafile-working-in-excel-project-2.xlsx\",\n    usecols=\"A:Q\",\n    header=1,\n    index_col=\"Period\",\n)\ndata_n = data_np.iloc[:10, :].copy()\ndata_p = data_np.iloc[14:24, :].copy()\n\n\nmean_n_c = data_n.mean(axis=1)\nmean_p_c = data_p.agg(np.mean, axis=1)\n\n\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\")\nmean_p_c.plot(ax=ax, label=\"With punishment\")\nax.set_title(\"Average contributions to the public goods game\")\nax.set_ylabel(\"Average contribution\")\nax.legend();\n\n\n\n\n\n\n\n\n\ncompare_grps = pd.DataFrame(\n    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],\n    index=[\"Without punishment\", \"With punishment\"],\n)\n# Rename columns to have 'round' in them\ncompare_grps.columns = [\"Round \" + str(i) for i in compare_grps.columns]\n# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)\ncompare_grps = compare_grps.T\n# Make a bar chart\ncompare_grps.plot.bar(rot=0);\n\n\n\n\n\n\n\n\n\nn_c = data_n.agg([\"std\", \"var\", \"mean\"], 1)\nn_c\n\n\n\n\n\n\n\n\nstd\nvar\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n1\n2.020724\n4.083325\n10.578313\n\n\n2\n2.238129\n5.009220\n10.628398\n\n\n3\n2.329569\n5.426891\n10.407079\n\n\n4\n2.068213\n4.277504\n9.813033\n\n\n5\n2.108329\n4.445049\n9.305433\n\n\n6\n2.240881\n5.021549\n8.454844\n\n\n7\n2.136614\n4.565117\n7.837568\n\n\n8\n2.349442\n5.519880\n7.376388\n\n\n9\n2.413845\n5.826645\n6.392985\n\n\n10\n2.187126\n4.783520\n4.383769\n\n\n\n\n\n\n\n\np_c = data_p.agg([\"std\", \"var\", \"mean\"], 1)\n\n\nfig, ax = plt.subplots()\nn_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 standard deviations\n(n_c[\"mean\"] + 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 standard deviations\n(n_c[\"mean\"] - 2 * n_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_n.columns)):\n    ax.scatter(x=data_n.index, y=data_n.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game without punishment\")\nplt.show();\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\np_c[\"mean\"].plot(ax=ax, label=\"mean\")\n# mean + 2 sd\n(p_c[\"mean\"] + 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"±2 s.d.\")\n# mean - 2 sd\n(p_c[\"mean\"] - 2 * p_c[\"std\"]).plot(ax=ax, ylim=(0, None), color=\"red\", label=\"\")\nfor i in range(len(data_p.columns)):\n    ax.scatter(x=data_p.index, y=data_p.iloc[:, i], color=\"k\", alpha=0.3)\nax.legend()\nax.set_ylabel(\"Average contribution\")\nax.set_title(\"Contribution to public goods game with punishment\")\nplt.show();\n\n\n\n\n\n\n\n\n\ndata_p.apply(lambda x: x.max() - x.min(), axis=1)\n\nPeriod\n1     10.199675\n2     12.185065\n3     12.689935\n4     12.625000\n5     12.140375\n6     12.827541\n7     13.098931\n8     13.482621\n9     13.496754\n10    11.307360\ndtype: float64\n\n\n\ntest_function = lambda a, b, c: a**2 + b**2 + c**2\n\n\n# Now we apply the function by handing over (in parenthesis) the following inputs: a=3, b=4 and c=5\ntest_function(3, 4, 5)\n\n50\n\n\n\nrange_function = lambda x: x.max() - x.min()\nrange_p = data_p.apply(range_function, axis=1)\nrange_n = data_n.apply(range_function, axis=1)\n\n\nfig, ax = plt.subplots()\nrange_p.plot(ax=ax, label=\"With punishment\")\nrange_n.plot(ax=ax, label=\"Without punishment\")\nax.set_ylim(0, None)\nax.legend()\nax.set_title(\"Range of contributions to the public goods game\")\nplt.show();\n\n\n\n\n\n\n\n\n\nfuncs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\nsumm_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\nsumm_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\n\n\nsumm_n.loc[[1, 10], :].round(2)\n\n\n\n\n\n\n\n\nrange\nmax\nmin\nstd\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n\n\n1\n6.14\n14.10\n7.96\n2.02\n10.58\n\n\n10\n7.38\n8.68\n1.30\n2.19\n4.38\n\n\n\n\n\n\n\n\nsumm_p.loc[[1, 10], :].round(2)\n\n\n\n\n\n\n\n\nrange\nmax\nmin\nstd\nmean\n\n\nPeriod\n\n\n\n\n\n\n\n\n\n1\n10.20\n16.02\n5.82\n3.21\n10.64\n\n\n10\n11.31\n17.51\n6.20\n3.90\n12.87\n\n\n\n\n\n\n\n\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[49], line 1\n----&gt; 1 pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])\n\nFile /Applications/anaconda3/lib/python3.12/site-packages/pingouin/parametric.py:232, in ttest(x, y, paired, alternative, correction, r, confidence)\n    229     paired = False\n    231 # Remove rows with missing values\n--&gt; 232 x, y = remove_na(x, y, paired=paired)\n    233 nx, ny = x.size, y.size\n    235 if ny == 1:\n    236     # Case one sample T-test\n\nFile /Applications/anaconda3/lib/python3.12/site-packages/pingouin/utils.py:243, in remove_na(x, y, paired, axis)\n    240     return _remove_na_single(x, axis=axis), y\n    241 if x.ndim != y.ndim or paired is False:\n    242     # x and y do not have the same dimension\n--&gt; 243     x_no_nan = _remove_na_single(x, axis=axis)\n    244     y_no_nan = _remove_na_single(y, axis=axis)\n    245     return x_no_nan, y_no_nan\n\nFile /Applications/anaconda3/lib/python3.12/site-packages/pingouin/utils.py:172, in _remove_na_single(x, axis)\n    167 \"\"\"Remove NaN in a single array.\n    168 This is an internal Pingouin function.\n    169 \"\"\"\n    170 if x.ndim == 1:\n    171     # 1D arrays\n--&gt; 172     x_mask = ~np.isnan(x)\n    173 else:\n    174     # 2D arrays\n    175     ax = 1 if axis == \"rows\" else 0\n\nTypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\n\n\n\n\npg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[50], line 1\n----&gt; 1 pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)\n\nFile /Applications/anaconda3/lib/python3.12/site-packages/pingouin/parametric.py:232, in ttest(x, y, paired, alternative, correction, r, confidence)\n    229     paired = False\n    231 # Remove rows with missing values\n--&gt; 232 x, y = remove_na(x, y, paired=paired)\n    233 nx, ny = x.size, y.size\n    235 if ny == 1:\n    236     # Case one sample T-test\n\nFile /Applications/anaconda3/lib/python3.12/site-packages/pingouin/utils.py:250, in remove_na(x, y, paired, axis)\n    247 # At this point, we assume that x and y are paired and have same dimensions\n    248 if x.ndim == 1:\n    249     # 1D arrays\n--&gt; 250     x_mask = ~np.isnan(x)\n    251     y_mask = ~np.isnan(y)\n    252 else:\n    253     # 2D arrays\n\nTypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\n\n\n\nSource: Rename columns to have 'round' in them\n\n\npractice3\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport textwrap\n\n\npd.read_csv(\n    \"https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv\", nrows=10\n)\n\n\n\n\n\n\n\n\nrownames\nname\nyear\nmonth\nday\nhour\nlat\nlong\nstatus\ncategory\nwind\npressure\ntropicalstorm_force_diameter\nhurricane_force_diameter\n\n\n\n\n0\n1\nAmy\n1975\n6\n27\n0\n27.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n1\n2\nAmy\n1975\n6\n27\n6\n28.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n2\n3\nAmy\n1975\n6\n27\n12\n29.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n3\n4\nAmy\n1975\n6\n27\n18\n30.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n4\n5\nAmy\n1975\n6\n28\n0\n31.5\n-78.8\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n5\n6\nAmy\n1975\n6\n28\n6\n32.4\n-78.7\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n6\n7\nAmy\n1975\n6\n28\n12\n33.3\n-78.0\ntropical depression\nNaN\n25\n1011\nNaN\nNaN\n\n\n7\n8\nAmy\n1975\n6\n28\n18\n34.0\n-77.0\ntropical depression\nNaN\n30\n1006\nNaN\nNaN\n\n\n8\n9\nAmy\n1975\n6\n29\n0\n34.4\n-75.8\ntropical storm\nNaN\n35\n1004\nNaN\nNaN\n\n\n9\n10\nAmy\n1975\n6\n29\n6\n34.0\n-74.8\ntropical storm\nNaN\n40\n1002\nNaN\nNaN\n\n\n\n\n\n\n\n\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogging.getLogger(\"urllib3\").setLevel(logging.DEBUG)\n\n\nimport pandas_datareader.data as web\n\ndf_u = web.DataReader(\"LRHUTTTTGBM156S\", \"fred\")\n\ndf_u.plot(title=\"UK unemployment (percent)\", legend=False, ylim=(2, 6), lw=3.0);\n\n\n\n\n\n\n\n\n\nimport pandas_datareader as pdr\npdr.get_data_fred('GS10')\n\n\n\n\n\n\n\n\nGS10\n\n\nDATE\n\n\n\n\n\n2020-01-01\n1.76\n\n\n2020-02-01\n1.50\n\n\n2020-03-01\n0.87\n\n\n2020-04-01\n0.66\n\n\n2020-05-01\n0.67\n\n\n2020-06-01\n0.73\n\n\n2020-07-01\n0.62\n\n\n2020-08-01\n0.65\n\n\n2020-09-01\n0.68\n\n\n2020-10-01\n0.79\n\n\n2020-11-01\n0.87\n\n\n2020-12-01\n0.93\n\n\n2021-01-01\n1.08\n\n\n2021-02-01\n1.26\n\n\n2021-03-01\n1.61\n\n\n2021-04-01\n1.64\n\n\n2021-05-01\n1.62\n\n\n2021-06-01\n1.52\n\n\n2021-07-01\n1.32\n\n\n2021-08-01\n1.28\n\n\n2021-09-01\n1.37\n\n\n2021-10-01\n1.58\n\n\n2021-11-01\n1.56\n\n\n2021-12-01\n1.47\n\n\n2022-01-01\n1.76\n\n\n2022-02-01\n1.93\n\n\n2022-03-01\n2.13\n\n\n2022-04-01\n2.75\n\n\n2022-05-01\n2.90\n\n\n2022-06-01\n3.14\n\n\n2022-07-01\n2.90\n\n\n2022-08-01\n2.90\n\n\n2022-09-01\n3.52\n\n\n2022-10-01\n3.98\n\n\n2022-11-01\n3.89\n\n\n2022-12-01\n3.62\n\n\n2023-01-01\n3.53\n\n\n2023-02-01\n3.75\n\n\n2023-03-01\n3.66\n\n\n2023-04-01\n3.46\n\n\n2023-05-01\n3.57\n\n\n2023-06-01\n3.75\n\n\n2023-07-01\n3.90\n\n\n2023-08-01\n4.17\n\n\n2023-09-01\n4.38\n\n\n2023-10-01\n4.80\n\n\n2023-11-01\n4.50\n\n\n2023-12-01\n4.02\n\n\n2024-01-01\n4.06\n\n\n2024-02-01\n4.21\n\n\n2024-03-01\n4.21\n\n\n2024-04-01\n4.54\n\n\n2024-05-01\n4.48\n\n\n2024-06-01\n4.31\n\n\n2024-07-01\n4.25\n\n\n2024-08-01\n3.87\n\n\n2024-09-01\n3.72\n\n\n2024-10-01\n4.10\n\n\n2024-11-01\n4.36\n\n\n\n\n\n\n\n\nimport pandas_datareader.data as web\n\ndf_u = web.DataReader(\"LRHUTTTTGBM156S\", \"fred\")\n\ndf_u.plot(title=\"UK unemployment (percent)\", legend=False, ylim=(2, 6), lw=3.0);\n\n\n\n\n\n\n\n\nSource: practice3.ipynb\n\n\npractice4\n\nWhich major has the lowest unemployment rate?\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# 读取数据\nall_ages_df = pd.read_csv('college-majors/all-ages.csv')\n\n# 按失业率升序排列\nsorted_all_ages_df = all_ages_df.sort_values(by='Unemployment_rate')\n\n# 显示失业率最低的前三个专业\nprint(sorted_all_ages_df[['Major', 'Unemployment_rate']].head(3))\n\n                                         Major  Unemployment_rate\n26  EDUCATIONAL ADMINISTRATION AND SUPERVISION           0.000000\n51      GEOLOGICAL AND GEOPHYSICAL ENGINEERING           0.000000\n85                                PHARMACOLOGY           0.016111\n\n\nWhich major has the highest percentage of women?\n\nimport pandas as pd\n\n# 读取数据\nwomen_stem_df = pd.read_csv('./data/college-majors/women-stem.csv')\n\n# 排序数据，按女性比例降序排列\nsorted_women_stem_df = women_stem_df.sort_values(by='ShareWomen', ascending=False)\n\n# 显示女性比例最高的前三个专业\nprint(sorted_women_stem_df[['Major', 'ShareWomen']].head(3))\n\n                                            Major  ShareWomen\n74  COMMUNICATION DISORDERS SCIENCES AND SERVICES    0.967998\n40                     MEDICAL ASSISTING SERVICES    0.927807\n26                                        NURSING    0.896019\n\n\n\nWhy do we often choose the median, rather than the mean, to describe the typical income of a group of people?\n\n中位数不受极端值的影响 ,平均值 由于容易受到极端数据的影响，可能不适合用来描述收入这类具有高度偏态的分布。 收入分布通常不对称 更能反映不均衡的收入差距 中位数收入通常被视为更合适的衡量标准，因为它代表了一个人在收入分布中的“中间位置”，是更符合实际的“典型收入”。\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 读取数据\nall_ages_df = pd.read_csv('./data/college-majors/all-ages.csv')\n\n# 根据专业类别分组，并计算每个类别的中位数收入\ncategory_median_income = all_ages_df.groupby('Major_category')['Median'].median()\n\n\n# 按照中位数收入从高到低排序\nsorted_median_incomes = category_median_income.sort_values(ascending=False)\n\n\nprint(sorted_median_incomes.head(1))\n# 将中位数收入四舍五入到5000的倍数\ncategory_median_income_rounded = category_median_income.apply(lambda x: round(x / 5000) * 2500)\n\n# 绘制专业类别的中位数收入分布\ncategory_median_income_rounded.sort_values().plot(kind='barh', figsize=(10, 6), color='skyblue')\n\n# 添加标题和标签\nplt.title('Median Income Distribution Across Major Categories (Rounded to $5000)')\nplt.xlabel('Median Income ($)')\nplt.ylabel('Major Category')\n\n# 显示图表\nplt.show()\n\nMajor_category\nEngineering    75000.0\nName: Median, dtype: float64\n\n\n\n\n\n\n\n\n\n收入的范围比较宽，选择 $5000 作为 binwidth 可以平滑分布，使得我们能清楚地看到收入的主要分布趋势。 $1000 的 binwidth 可能会导致图表过于细化，显示的信息较多但不一定有助于分析整体分布。 $5000 的 binwidth 可以减少条形图上的冗余细节，同时仍能反映出收入的波动和分布。\n\n# 根据专业类别分组，并计算每个类别的就业人数总和\ncategory_employed = all_ages_df.groupby('Major_category')['Employed'].sum()\n\n# 按照就业人数升序排序，找出最不受欢迎的专业类别\nleast_popular_category = category_employed.sort_values().head(1)\n\nprint(\"The least popular major category is:\")\nprint(least_popular_category)\n\nThe least popular major category is:\nMajor_category\nInterdisciplinary    35706\nName: Employed, dtype: int64\n\n\n\nimport pandas as pd\n\n\nall_ages_df = pd.read_csv('./data/college-majors/all-ages.csv')\n\n# 创建一个 STEM 专业类别的列表\nstem_categories = [\n        'BIOLOGY', 'BIOCHEMICAL SCIENCES', 'BOTANY', 'MOLECULAR BIOLOGY', 'ECOLOGY', 'GENETICS', 'MICROBIOLOGY',\n    'PHARMACOLOGY', 'PHYSIOLOGY', 'ZOOLOGY', 'NEUROSCIENCE', 'CHEMISTRY', 'ATMOSPHERIC SCIENCES AND METEOROLOGY',\n    'GEOLOGY AND EARTH SCIENCE', 'OCEANOGRAPHY', 'PHYSICS', 'MATERIALS SCIENCE',\n    'INFORMATION SCIENCES', 'COMPUTER PROGRAMMING AND DATA PROCESSING', 'BIOLOGICAL ENGINEERING', \n    'AEROSPACE ENGINEERING', 'BIOMEDICAL ENGINEERING', 'CHEMICAL ENGINEERING', 'CIVIL ENGINEERING',\n    'COMPUTER ENGINEERING', 'ELECTRICAL ENGINEERING', 'ENGINEERING MECHANICS PHYSICS AND SCIENCE',\n    'ENVIRONMENTAL ENGINEERING', 'GEOLOGICAL AND GEOPHYSICAL ENGINEERING', 'INDUSTRIAL AND MANUFACTURING ENGINEERING',\n    'MATERIALS ENGINEERING AND MATERIALS SCIENCE', 'MECHANICAL ENGINEERING', 'METALLURGICAL ENGINEERING',\n    'MINING AND MINERAL ENGINEERING', 'NAVAL ARCHITECTURE AND MARINE ENGINEERING', 'NUCLEAR ENGINEERING',\n    'PETROLEUM ENGINEERING', 'MATHEMATICS', 'APPLIED MATHEMATICS', 'STATISTICS AND DECISION SCIENCE',\n    'MATHEMATICS AND COMPUTER SCIENCE', 'COGNITIVE SCIENCE AND BIOPSYCHOLOGY'\n]\n\nall_ages_df['is_stem'] = all_ages_df['Major'].apply(lambda x: 1 if x in stem_categories else 0)\n\n# 计算所有专业的中位收入\noverall_median_income = all_ages_df['Median'].median()\nprint(overall_median_income)\n# 筛选出 STEM 专业中，中位收入低于或等于所有专业中位收入的专业\nstem_below_or_equal_median = all_ages_df[(all_ages_df['is_stem'] == 1) & (all_ages_df['Median'] &lt;= overall_median_income)]\n\n# 选择并显示专业名称、中位收入、第25百分位数和第75百分位数收入\nresult = stem_below_or_equal_median[['Major', 'Median', 'P25th', 'P75th']]\n\n# 按照中位收入从高到低排序\nresult_sorted = result.sort_values(by='Median', ascending=False)\n\n\nprint(result_sorted)\n\n53000.0\n                                  Major  Median  P25th    P75th\n79                 BIOCHEMICAL SCIENCES   53000  33000  82000.0\n98  COGNITIVE SCIENCE AND BIOPSYCHOLOGY   53000  31500  93000.0\n78                              BIOLOGY   51000  35000  80000.0\n80                               BOTANY   50000  32000  75000.0\n86                           PHYSIOLOGY   50000  30000  75000.0\n83                             GENETICS   48000  33000  80000.0\n82                              ECOLOGY   47500  32000  73000.0\n81                    MOLECULAR BIOLOGY   45000  30000  70000.0\n88                         NEUROSCIENCE   35000  28000  52000.0\n\n\n\nimport seaborn as sns\n\n\n\nwomen_stem_df = pd.read_csv('./data/college-majors/women-stem.csv')\n\n# 查看数据结构，确保加载正确\nprint(women_stem_df.head())\n\n\n#  添加一个新列标记专业是否为 STEM 专业\nwomen_stem_df['is_stem'] = women_stem_df['Major'].apply(lambda x: 1 if x in stem_categories else 0)\n\n#  绘制散点图\nplt.figure(figsize=(10, 6))\n\n# 根据是否为 STEM 专业进行颜色区分\nsns.scatterplot(data=women_stem_df, x='ShareWomen', y='Median', hue='is_stem', palette={0: 'blue', 1: 'red'}, s=100)\n\n# 设置图表标题和标签\nplt.title('Relationship Between Proportion of Women and Median Income in STEM and Non-STEM Majors', fontsize=16)\nplt.xlabel('Proportion of Women in Major', fontsize=12)\nplt.ylabel('Median Income ($)', fontsize=12)\n\n# 显示图例\nplt.legend(title='STEM Major', labels=['Non-STEM', 'STEM'])\n\n# 显示图表\nplt.show()\n\n   Rank  Major_code                                      Major Major_category  \\\n0     1        2419                      PETROLEUM ENGINEERING    Engineering   \n1     2        2416             MINING AND MINERAL ENGINEERING    Engineering   \n2     3        2415                  METALLURGICAL ENGINEERING    Engineering   \n3     4        2417  NAVAL ARCHITECTURE AND MARINE ENGINEERING    Engineering   \n4     5        2418                        NUCLEAR ENGINEERING    Engineering   \n\n   Total   Men  Women  ShareWomen  Median  \n0   2339  2057    282    0.120564  110000  \n1    756   679     77    0.101852   75000  \n2    856   725    131    0.153037   73000  \n3   1258  1123    135    0.107313   70000  \n4   2573  2200    373    0.144967   65000  \n\n\n\n\n\n\n\n\n\nSource: 读取数据"
  }
]